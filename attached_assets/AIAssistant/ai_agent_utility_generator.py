"""
AI Agent Editor Utility Generator
Creates intelligent editor utilities that communicate with backend AI
UE 5.6 Compliant
"""

import unreal
from typing import Dict, List, Optional, Any
import json


class AIAgentUtilityGenerator:
    """
    Generates Editor Utility Widgets that act as AI agents.
    These utilities can query the backend, execute action plans,
    and make intelligent decisions.
    """
    
    def generate_ai_agent_utility(
        self,
        name: str,
        description: str,
        capabilities: List[str],
        ui_config: Optional[Dict] = None
    ) -> Dict[str, Any]:
        """
        Generate an AI-powered Editor Utility Widget.
        
        Args:
            name: Widget name
            description: What it does
            capabilities: List of capabilities 
                ['spawn_actors', 'camera_control', 'query_project']
            ui_config: UI configuration
        
        Returns:
            Result with script path
        """
        script = self._generate_agent_script(
            name, description, capabilities, ui_config or {}
        )
        
        script_path = self._save_script(name, script)
        
        return {
            "success": True,
            "widget_name": name,
            "script_path": script_path,
            "script": script
        }
    
    def _generate_agent_script(
        self,
        name: str,
        description: str,
        capabilities: List[str],
        ui_config: Dict
    ) -> str:
        """Generate full Python script for AI agent utility."""
        
        parts = []
        
        # Header with imports
        parts.append(f'''"""
{name} - {description}
AI-Powered Editor Utility Widget with Backend Integration
Auto-generated by AIAgentUtilityGenerator
"""

import unreal
from AIAssistant.api_client import get_client
from AIAssistant.scene_orchestrator import get_orchestrator
from AIAssistant.viewport_controller import get_viewport_controller
from AIAssistant.actor_manipulator import get_manipulator
import json

@unreal.uclass()
class {name}(unreal.EditorUtilityWidget):
    """
    {description}
    
    Capabilities: {", ".join(capabilities)}
    """
    
    def __init__(self):
        super().__init__()
        self.api_client = get_client()
        self.orchestrator = get_orchestrator()
        self.viewport = get_viewport_controller()
        self.manipulator = get_manipulator()
''')
        
        # Add methods based on capabilities
        if 'spawn_actors' in capabilities:
            parts.append('''
    @unreal.ufunction(ret=None, params=[str, int])
    def ai_spawn_actors(self, prompt, count=1):
        """Ask AI to spawn actors based on natural language."""
        query = f"Build scene: {prompt}. Spawn {count} actors."
        
        # Query backend for action plan
        response = self.api_client.post_json(
            "/execute_command",
            {"prompt": query}
        )
        
        ai_response = response.get("response", "")
        
        # Parse and execute if contains action plan
        if "[ACTION_PLAN]" in ai_response:
            self._execute_action_plan(ai_response)
        else:
            unreal.log(f"AI: {ai_response}")
''')
        
        if 'camera_control' in capabilities:
            parts.append('''
    @unreal.ufunction(ret=None, params=[])
    def smart_camera_focus(self):
        """AI-powered camera focusing."""
        # Ask AI to determine best camera position
        response = self.api_client.post_json(
            "/execute_command",
            {"prompt": "Focus camera on selected with best framing"}
        )
        
        # Execute camera action
        result = self.viewport.focus_on_selected(
            distance_multiplier=2.5
        )
        
        unreal.log(result.get("message", "Camera adjusted"))
''')
        
        if 'query_project' in capabilities:
            parts.append('''
    @unreal.ufunction(ret=None, params=[str])
    def query_project_ai(self, question):
        """Query project using AI."""
        # Use context-aware query
        response = self.api_client.post_json(
            "/execute_command",
            {"prompt": question}
        )
        
        answer = response.get("response", "No response")
        
        # Display in editor
        unreal.log(f"AI Answer: {answer}")
        
        # Could also write to file for Blueprint to read
        self._write_response(answer)
    
    def _write_response(self, text):
        """Write response to file for Blueprint UI."""
        import os
        project_dir = unreal.Paths.project_saved_dir()
        response_file = os.path.join(
            project_dir, "AIConsole", "utility_response.txt"
        )
        
        os.makedirs(os.path.dirname(response_file), exist_ok=True)
        
        with open(response_file, 'w') as f:
            f.write(text)
''')
        
        if 'execute_plans' in capabilities:
            parts.append('''
    def _execute_action_plan(self, plan_response):
        """Execute AI-generated action plan."""
        # Parse JSON action plan from AI
        try:
            # Extract JSON from response
            start = plan_response.find('[')
            end = plan_response.rfind(']') + 1
            plan = json.loads(plan_response[start:end])
            
            # Execute each action
            for action in plan:
                action_type = action.get("type")
                
                if action_type == "spawn":
                    self.orchestrator.spawn_static_mesh(
                        asset_path=action.get("asset"),
                        location=tuple(action.get("location", [0,0,0])),
                        rotation=tuple(action.get("rotation", [0,0,0]))
                    )
                
                elif action_type == "align":
                    self.manipulator.align_actors(
                        axis=action.get("axis", "z"),
                        align_to=action.get("align_to", "min")
                    )
                
                elif action_type == "camera":
                    self.viewport.focus_on_selected()
            
            unreal.log(f"Executed {len(plan)} actions")
            
        except Exception as e:
            unreal.log_error(f"Failed to execute plan: {e}")
''')
        
        # Add UI interaction methods
        parts.append('''
    @unreal.ufunction(ret=str, params=[])
    def get_status(self):
        """Get current status for UI display."""
        actor_subsystem = unreal.get_editor_subsystem(
            unreal.EditorActorSubsystem
        )
        selected_count = len(
            actor_subsystem.get_selected_level_actors()
        )
        
        return f"Ready | Selected: {selected_count}"
''')
        
        return "\n".join(parts)
    
    def _save_script(self, widget_name: str, script: str) -> str:
        """Save to project Python directory."""
        import os
        
        project_dir = unreal.Paths.project_content_dir()
        python_dir = os.path.join(
            project_dir, "..", "Python", "AIAgentUtilities"
        )
        
        os.makedirs(python_dir, exist_ok=True)
        
        script_path = os.path.join(python_dir, f"{widget_name}.py")
        
        with open(script_path, 'w') as f:
            f.write(script)
        
        return script_path
    
    def generate_scene_builder_utility(self, name: str) -> Dict[str, Any]:
        """Generate a scene builder utility with AI planning."""
        return self.generate_ai_agent_utility(
            name=name,
            description="AI-powered scene builder with natural language",
            capabilities=[
                'spawn_actors',
                'camera_control',
                'execute_plans',
                'query_project'
            ]
        )
    
    def generate_smart_organizer_utility(
        self, name: str
    ) -> Dict[str, Any]:
        """Generate actor organization utility."""
        return self.generate_ai_agent_utility(
            name=name,
            description="Smart actor organizer with AI suggestions",
            capabilities=['execute_plans', 'query_project']
        )


# Singleton
_agent_generator: Optional[AIAgentUtilityGenerator] = None


def get_agent_generator() -> AIAgentUtilityGenerator:
    """Get the AI agent utility generator."""
    global _agent_generator
    if _agent_generator is None:
        _agent_generator = AIAgentUtilityGenerator()
    return _agent_generator
